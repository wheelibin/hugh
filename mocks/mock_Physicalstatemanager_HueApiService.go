// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	hue "github.com/wheelibin/hugh/internal/hue"

	models "github.com/wheelibin/hugh/internal/models"
)

// MockPhysicalstatemanagerHueApiService is an autogenerated mock type for the hueApiService type
type MockPhysicalstatemanagerHueApiService struct {
	mock.Mock
}

type MockPhysicalstatemanagerHueApiService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPhysicalstatemanagerHueApiService) EXPECT() *MockPhysicalstatemanagerHueApiService_Expecter {
	return &MockPhysicalstatemanagerHueApiService_Expecter{mock: &_m.Mock}
}

// DiscoverLights provides a mock function with given fields: schedules
func (_m *MockPhysicalstatemanagerHueApiService) DiscoverLights(schedules []models.Schedule) ([]models.HughLight, error) {
	ret := _m.Called(schedules)

	var r0 []models.HughLight
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.Schedule) ([]models.HughLight, error)); ok {
		return rf(schedules)
	}
	if rf, ok := ret.Get(0).(func([]models.Schedule) []models.HughLight); ok {
		r0 = rf(schedules)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.HughLight)
		}
	}

	if rf, ok := ret.Get(1).(func([]models.Schedule) error); ok {
		r1 = rf(schedules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhysicalstatemanagerHueApiService_DiscoverLights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverLights'
type MockPhysicalstatemanagerHueApiService_DiscoverLights_Call struct {
	*mock.Call
}

// DiscoverLights is a helper method to define mock.On call
//   - schedules []models.Schedule
func (_e *MockPhysicalstatemanagerHueApiService_Expecter) DiscoverLights(schedules interface{}) *MockPhysicalstatemanagerHueApiService_DiscoverLights_Call {
	return &MockPhysicalstatemanagerHueApiService_DiscoverLights_Call{Call: _e.mock.On("DiscoverLights", schedules)}
}

func (_c *MockPhysicalstatemanagerHueApiService_DiscoverLights_Call) Run(run func(schedules []models.Schedule)) *MockPhysicalstatemanagerHueApiService_DiscoverLights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.Schedule))
	})
	return _c
}

func (_c *MockPhysicalstatemanagerHueApiService_DiscoverLights_Call) Return(_a0 []models.HughLight, _a1 error) *MockPhysicalstatemanagerHueApiService_DiscoverLights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhysicalstatemanagerHueApiService_DiscoverLights_Call) RunAndReturn(run func([]models.Schedule) ([]models.HughLight, error)) *MockPhysicalstatemanagerHueApiService_DiscoverLights_Call {
	_c.Call.Return(run)
	return _c
}

// GetScenes provides a mock function with given fields:
func (_m *MockPhysicalstatemanagerHueApiService) GetScenes() ([]hue.HueScene, error) {
	ret := _m.Called()

	var r0 []hue.HueScene
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]hue.HueScene, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []hue.HueScene); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hue.HueScene)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhysicalstatemanagerHueApiService_GetScenes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScenes'
type MockPhysicalstatemanagerHueApiService_GetScenes_Call struct {
	*mock.Call
}

// GetScenes is a helper method to define mock.On call
func (_e *MockPhysicalstatemanagerHueApiService_Expecter) GetScenes() *MockPhysicalstatemanagerHueApiService_GetScenes_Call {
	return &MockPhysicalstatemanagerHueApiService_GetScenes_Call{Call: _e.mock.On("GetScenes")}
}

func (_c *MockPhysicalstatemanagerHueApiService_GetScenes_Call) Run(run func()) *MockPhysicalstatemanagerHueApiService_GetScenes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPhysicalstatemanagerHueApiService_GetScenes_Call) Return(_a0 []hue.HueScene, _a1 error) *MockPhysicalstatemanagerHueApiService_GetScenes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhysicalstatemanagerHueApiService_GetScenes_Call) RunAndReturn(run func() ([]hue.HueScene, error)) *MockPhysicalstatemanagerHueApiService_GetScenes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLightState provides a mock function with given fields: lsID, targetState
func (_m *MockPhysicalstatemanagerHueApiService) UpdateLightState(lsID string, targetState models.LightState) error {
	ret := _m.Called(lsID, targetState)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.LightState) error); ok {
		r0 = rf(lsID, targetState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPhysicalstatemanagerHueApiService_UpdateLightState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLightState'
type MockPhysicalstatemanagerHueApiService_UpdateLightState_Call struct {
	*mock.Call
}

// UpdateLightState is a helper method to define mock.On call
//   - lsID string
//   - targetState models.LightState
func (_e *MockPhysicalstatemanagerHueApiService_Expecter) UpdateLightState(lsID interface{}, targetState interface{}) *MockPhysicalstatemanagerHueApiService_UpdateLightState_Call {
	return &MockPhysicalstatemanagerHueApiService_UpdateLightState_Call{Call: _e.mock.On("UpdateLightState", lsID, targetState)}
}

func (_c *MockPhysicalstatemanagerHueApiService_UpdateLightState_Call) Run(run func(lsID string, targetState models.LightState)) *MockPhysicalstatemanagerHueApiService_UpdateLightState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.LightState))
	})
	return _c
}

func (_c *MockPhysicalstatemanagerHueApiService_UpdateLightState_Call) Return(_a0 error) *MockPhysicalstatemanagerHueApiService_UpdateLightState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPhysicalstatemanagerHueApiService_UpdateLightState_Call) RunAndReturn(run func(string, models.LightState) error) *MockPhysicalstatemanagerHueApiService_UpdateLightState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSceneState provides a mock function with given fields: ID, targetState
func (_m *MockPhysicalstatemanagerHueApiService) UpdateSceneState(ID string, targetState models.LightState) error {
	ret := _m.Called(ID, targetState)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.LightState) error); ok {
		r0 = rf(ID, targetState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSceneState'
type MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call struct {
	*mock.Call
}

// UpdateSceneState is a helper method to define mock.On call
//   - ID string
//   - targetState models.LightState
func (_e *MockPhysicalstatemanagerHueApiService_Expecter) UpdateSceneState(ID interface{}, targetState interface{}) *MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call {
	return &MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call{Call: _e.mock.On("UpdateSceneState", ID, targetState)}
}

func (_c *MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call) Run(run func(ID string, targetState models.LightState)) *MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.LightState))
	})
	return _c
}

func (_c *MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call) Return(_a0 error) *MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call) RunAndReturn(run func(string, models.LightState) error) *MockPhysicalstatemanagerHueApiService_UpdateSceneState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPhysicalstatemanagerHueApiService creates a new instance of MockPhysicalstatemanagerHueApiService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPhysicalstatemanagerHueApiService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPhysicalstatemanagerHueApiService {
	mock := &MockPhysicalstatemanagerHueApiService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
