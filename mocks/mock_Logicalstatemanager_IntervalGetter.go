// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/wheelibin/hugh/internal/models"

	schedule "github.com/wheelibin/hugh/internal/schedule"

	time "time"
)

// MockLogicalstatemanagerIntervalGetter is an autogenerated mock type for the intervalGetter type
type MockLogicalstatemanagerIntervalGetter struct {
	mock.Mock
}

type MockLogicalstatemanagerIntervalGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogicalstatemanagerIntervalGetter) EXPECT() *MockLogicalstatemanagerIntervalGetter_Expecter {
	return &MockLogicalstatemanagerIntervalGetter_Expecter{mock: &_m.Mock}
}

// GetScheduleIntervalForTime provides a mock function with given fields: sch, t
func (_m *MockLogicalstatemanagerIntervalGetter) GetScheduleIntervalForTime(sch models.Schedule, t time.Time) (schedule.Interval, error) {
	ret := _m.Called(sch, t)

	var r0 schedule.Interval
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Schedule, time.Time) (schedule.Interval, error)); ok {
		return rf(sch, t)
	}
	if rf, ok := ret.Get(0).(func(models.Schedule, time.Time) schedule.Interval); ok {
		r0 = rf(sch, t)
	} else {
		r0 = ret.Get(0).(schedule.Interval)
	}

	if rf, ok := ret.Get(1).(func(models.Schedule, time.Time) error); ok {
		r1 = rf(sch, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduleIntervalForTime'
type MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call struct {
	*mock.Call
}

// GetScheduleIntervalForTime is a helper method to define mock.On call
//   - sch models.Schedule
//   - t time.Time
func (_e *MockLogicalstatemanagerIntervalGetter_Expecter) GetScheduleIntervalForTime(sch interface{}, t interface{}) *MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call {
	return &MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call{Call: _e.mock.On("GetScheduleIntervalForTime", sch, t)}
}

func (_c *MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call) Run(run func(sch models.Schedule, t time.Time)) *MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Schedule), args[1].(time.Time))
	})
	return _c
}

func (_c *MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call) Return(_a0 schedule.Interval, _a1 error) *MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call) RunAndReturn(run func(models.Schedule, time.Time) (schedule.Interval, error)) *MockLogicalstatemanagerIntervalGetter_GetScheduleIntervalForTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogicalstatemanagerIntervalGetter creates a new instance of MockLogicalstatemanagerIntervalGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogicalstatemanagerIntervalGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogicalstatemanagerIntervalGetter {
	mock := &MockLogicalstatemanagerIntervalGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
