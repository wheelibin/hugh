// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/wheelibin/hugh/internal/models"

	time "time"
)

// MockLogicalstatemanagerDbAccess is an autogenerated mock type for the dbAccess type
type MockLogicalstatemanagerDbAccess struct {
	mock.Mock
}

type MockLogicalstatemanagerDbAccess_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogicalstatemanagerDbAccess) EXPECT() *MockLogicalstatemanagerDbAccess_Expecter {
	return &MockLogicalstatemanagerDbAccess_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: lights
func (_m *MockLogicalstatemanagerDbAccess) Add(lights []models.HughLight) error {
	ret := _m.Called(lights)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.HughLight) error); ok {
		r0 = rf(lights)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogicalstatemanagerDbAccess_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockLogicalstatemanagerDbAccess_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - lights []models.HughLight
func (_e *MockLogicalstatemanagerDbAccess_Expecter) Add(lights interface{}) *MockLogicalstatemanagerDbAccess_Add_Call {
	return &MockLogicalstatemanagerDbAccess_Add_Call{Call: _e.mock.On("Add", lights)}
}

func (_c *MockLogicalstatemanagerDbAccess_Add_Call) Run(run func(lights []models.HughLight)) *MockLogicalstatemanagerDbAccess_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.HughLight))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_Add_Call) Return(_a0 error) *MockLogicalstatemanagerDbAccess_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_Add_Call) RunAndReturn(run func([]models.HughLight) error) *MockLogicalstatemanagerDbAccess_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddScenes provides a mock function with given fields: scenes
func (_m *MockLogicalstatemanagerDbAccess) AddScenes(scenes []models.HughScene) error {
	ret := _m.Called(scenes)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.HughScene) error); ok {
		r0 = rf(scenes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogicalstatemanagerDbAccess_AddScenes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddScenes'
type MockLogicalstatemanagerDbAccess_AddScenes_Call struct {
	*mock.Call
}

// AddScenes is a helper method to define mock.On call
//   - scenes []models.HughScene
func (_e *MockLogicalstatemanagerDbAccess_Expecter) AddScenes(scenes interface{}) *MockLogicalstatemanagerDbAccess_AddScenes_Call {
	return &MockLogicalstatemanagerDbAccess_AddScenes_Call{Call: _e.mock.On("AddScenes", scenes)}
}

func (_c *MockLogicalstatemanagerDbAccess_AddScenes_Call) Run(run func(scenes []models.HughScene)) *MockLogicalstatemanagerDbAccess_AddScenes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.HughScene))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_AddScenes_Call) Return(_a0 error) *MockLogicalstatemanagerDbAccess_AddScenes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_AddScenes_Call) RunAndReturn(run func([]models.HughScene) error) *MockLogicalstatemanagerDbAccess_AddScenes_Call {
	_c.Call.Return(run)
	return _c
}

// ClearLightOverrides provides a mock function with given fields: lsID
func (_m *MockLogicalstatemanagerDbAccess) ClearLightOverrides(lsID string) error {
	ret := _m.Called(lsID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(lsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearLightOverrides'
type MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call struct {
	*mock.Call
}

// ClearLightOverrides is a helper method to define mock.On call
//   - lsID string
func (_e *MockLogicalstatemanagerDbAccess_Expecter) ClearLightOverrides(lsID interface{}) *MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call {
	return &MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call{Call: _e.mock.On("ClearLightOverrides", lsID)}
}

func (_c *MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call) Run(run func(lsID string)) *MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call) Return(_a0 error) *MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call) RunAndReturn(run func(string) error) *MockLogicalstatemanagerDbAccess_ClearLightOverrides_Call {
	_c.Call.Return(run)
	return _c
}

// GetLightLastUpdate provides a mock function with given fields: lsID
func (_m *MockLogicalstatemanagerDbAccess) GetLightLastUpdate(lsID string) (*time.Time, error) {
	ret := _m.Called(lsID)

	var r0 *time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*time.Time, error)); ok {
		return rf(lsID)
	}
	if rf, ok := ret.Get(0).(func(string) *time.Time); ok {
		r0 = rf(lsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLightLastUpdate'
type MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call struct {
	*mock.Call
}

// GetLightLastUpdate is a helper method to define mock.On call
//   - lsID string
func (_e *MockLogicalstatemanagerDbAccess_Expecter) GetLightLastUpdate(lsID interface{}) *MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call {
	return &MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call{Call: _e.mock.On("GetLightLastUpdate", lsID)}
}

func (_c *MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call) Run(run func(lsID string)) *MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call) Return(_a0 *time.Time, _a1 error) *MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call) RunAndReturn(run func(string) (*time.Time, error)) *MockLogicalstatemanagerDbAccess_GetLightLastUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// GetLightServiceIDForZigbeeID provides a mock function with given fields: zigbeeID
func (_m *MockLogicalstatemanagerDbAccess) GetLightServiceIDForZigbeeID(zigbeeID string) (string, error) {
	ret := _m.Called(zigbeeID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(zigbeeID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(zigbeeID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(zigbeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLightServiceIDForZigbeeID'
type MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call struct {
	*mock.Call
}

// GetLightServiceIDForZigbeeID is a helper method to define mock.On call
//   - zigbeeID string
func (_e *MockLogicalstatemanagerDbAccess_Expecter) GetLightServiceIDForZigbeeID(zigbeeID interface{}) *MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call {
	return &MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call{Call: _e.mock.On("GetLightServiceIDForZigbeeID", zigbeeID)}
}

func (_c *MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call) Run(run func(zigbeeID string)) *MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call) Return(_a0 string, _a1 error) *MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call) RunAndReturn(run func(string) (string, error)) *MockLogicalstatemanagerDbAccess_GetLightServiceIDForZigbeeID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLightTargetState provides a mock function with given fields: lsID
func (_m *MockLogicalstatemanagerDbAccess) GetLightTargetState(lsID string) (models.LightState, error) {
	ret := _m.Called(lsID)

	var r0 models.LightState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.LightState, error)); ok {
		return rf(lsID)
	}
	if rf, ok := ret.Get(0).(func(string) models.LightState); ok {
		r0 = rf(lsID)
	} else {
		r0 = ret.Get(0).(models.LightState)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogicalstatemanagerDbAccess_GetLightTargetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLightTargetState'
type MockLogicalstatemanagerDbAccess_GetLightTargetState_Call struct {
	*mock.Call
}

// GetLightTargetState is a helper method to define mock.On call
//   - lsID string
func (_e *MockLogicalstatemanagerDbAccess_Expecter) GetLightTargetState(lsID interface{}) *MockLogicalstatemanagerDbAccess_GetLightTargetState_Call {
	return &MockLogicalstatemanagerDbAccess_GetLightTargetState_Call{Call: _e.mock.On("GetLightTargetState", lsID)}
}

func (_c *MockLogicalstatemanagerDbAccess_GetLightTargetState_Call) Run(run func(lsID string)) *MockLogicalstatemanagerDbAccess_GetLightTargetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_GetLightTargetState_Call) Return(_a0 models.LightState, _a1 error) *MockLogicalstatemanagerDbAccess_GetLightTargetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_GetLightTargetState_Call) RunAndReturn(run func(string) (models.LightState, error)) *MockLogicalstatemanagerDbAccess_GetLightTargetState_Call {
	_c.Call.Return(run)
	return _c
}

// IsScheduledLight provides a mock function with given fields: lsID
func (_m *MockLogicalstatemanagerDbAccess) IsScheduledLight(lsID string) (bool, error) {
	ret := _m.Called(lsID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(lsID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(lsID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogicalstatemanagerDbAccess_IsScheduledLight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsScheduledLight'
type MockLogicalstatemanagerDbAccess_IsScheduledLight_Call struct {
	*mock.Call
}

// IsScheduledLight is a helper method to define mock.On call
//   - lsID string
func (_e *MockLogicalstatemanagerDbAccess_Expecter) IsScheduledLight(lsID interface{}) *MockLogicalstatemanagerDbAccess_IsScheduledLight_Call {
	return &MockLogicalstatemanagerDbAccess_IsScheduledLight_Call{Call: _e.mock.On("IsScheduledLight", lsID)}
}

func (_c *MockLogicalstatemanagerDbAccess_IsScheduledLight_Call) Run(run func(lsID string)) *MockLogicalstatemanagerDbAccess_IsScheduledLight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_IsScheduledLight_Call) Return(_a0 bool, _a1 error) *MockLogicalstatemanagerDbAccess_IsScheduledLight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_IsScheduledLight_Call) RunAndReturn(run func(string) (bool, error)) *MockLogicalstatemanagerDbAccess_IsScheduledLight_Call {
	_c.Call.Return(run)
	return _c
}

// SetLightBrightnessOverride provides a mock function with given fields: lsID, brightness, targetBrightness
func (_m *MockLogicalstatemanagerDbAccess) SetLightBrightnessOverride(lsID string, brightness int, targetBrightness int) error {
	ret := _m.Called(lsID, brightness, targetBrightness)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, int) error); ok {
		r0 = rf(lsID, brightness, targetBrightness)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLightBrightnessOverride'
type MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call struct {
	*mock.Call
}

// SetLightBrightnessOverride is a helper method to define mock.On call
//   - lsID string
//   - brightness int
//   - targetBrightness int
func (_e *MockLogicalstatemanagerDbAccess_Expecter) SetLightBrightnessOverride(lsID interface{}, brightness interface{}, targetBrightness interface{}) *MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call {
	return &MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call{Call: _e.mock.On("SetLightBrightnessOverride", lsID, brightness, targetBrightness)}
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call) Run(run func(lsID string, brightness int, targetBrightness int)) *MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call) Return(_a0 error) *MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call) RunAndReturn(run func(string, int, int) error) *MockLogicalstatemanagerDbAccess_SetLightBrightnessOverride_Call {
	_c.Call.Return(run)
	return _c
}

// SetLightColourTempOverride provides a mock function with given fields: lsID, colourTemp, targetColourTemp
func (_m *MockLogicalstatemanagerDbAccess) SetLightColourTempOverride(lsID string, colourTemp int, targetColourTemp int) error {
	ret := _m.Called(lsID, colourTemp, targetColourTemp)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, int) error); ok {
		r0 = rf(lsID, colourTemp, targetColourTemp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLightColourTempOverride'
type MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call struct {
	*mock.Call
}

// SetLightColourTempOverride is a helper method to define mock.On call
//   - lsID string
//   - colourTemp int
//   - targetColourTemp int
func (_e *MockLogicalstatemanagerDbAccess_Expecter) SetLightColourTempOverride(lsID interface{}, colourTemp interface{}, targetColourTemp interface{}) *MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call {
	return &MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call{Call: _e.mock.On("SetLightColourTempOverride", lsID, colourTemp, targetColourTemp)}
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call) Run(run func(lsID string, colourTemp int, targetColourTemp int)) *MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call) Return(_a0 error) *MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call) RunAndReturn(run func(string, int, int) error) *MockLogicalstatemanagerDbAccess_SetLightColourTempOverride_Call {
	_c.Call.Return(run)
	return _c
}

// SetLightOnState provides a mock function with given fields: lsID, on
func (_m *MockLogicalstatemanagerDbAccess) SetLightOnState(lsID string, on bool) error {
	ret := _m.Called(lsID, on)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(lsID, on)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogicalstatemanagerDbAccess_SetLightOnState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLightOnState'
type MockLogicalstatemanagerDbAccess_SetLightOnState_Call struct {
	*mock.Call
}

// SetLightOnState is a helper method to define mock.On call
//   - lsID string
//   - on bool
func (_e *MockLogicalstatemanagerDbAccess_Expecter) SetLightOnState(lsID interface{}, on interface{}) *MockLogicalstatemanagerDbAccess_SetLightOnState_Call {
	return &MockLogicalstatemanagerDbAccess_SetLightOnState_Call{Call: _e.mock.On("SetLightOnState", lsID, on)}
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightOnState_Call) Run(run func(lsID string, on bool)) *MockLogicalstatemanagerDbAccess_SetLightOnState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightOnState_Call) Return(_a0 error) *MockLogicalstatemanagerDbAccess_SetLightOnState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightOnState_Call) RunAndReturn(run func(string, bool) error) *MockLogicalstatemanagerDbAccess_SetLightOnState_Call {
	_c.Call.Return(run)
	return _c
}

// SetLightOnStateOverride provides a mock function with given fields: lsID, on, targetOn
func (_m *MockLogicalstatemanagerDbAccess) SetLightOnStateOverride(lsID string, on bool, targetOn bool) error {
	ret := _m.Called(lsID, on, targetOn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool, bool) error); ok {
		r0 = rf(lsID, on, targetOn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLightOnStateOverride'
type MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call struct {
	*mock.Call
}

// SetLightOnStateOverride is a helper method to define mock.On call
//   - lsID string
//   - on bool
//   - targetOn bool
func (_e *MockLogicalstatemanagerDbAccess_Expecter) SetLightOnStateOverride(lsID interface{}, on interface{}, targetOn interface{}) *MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call {
	return &MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call{Call: _e.mock.On("SetLightOnStateOverride", lsID, on, targetOn)}
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call) Run(run func(lsID string, on bool, targetOn bool)) *MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call) Return(_a0 error) *MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call) RunAndReturn(run func(string, bool, bool) error) *MockLogicalstatemanagerDbAccess_SetLightOnStateOverride_Call {
	_c.Call.Return(run)
	return _c
}

// SetLightUnreachable provides a mock function with given fields: lsID
func (_m *MockLogicalstatemanagerDbAccess) SetLightUnreachable(lsID string) error {
	ret := _m.Called(lsID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(lsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLightUnreachable'
type MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call struct {
	*mock.Call
}

// SetLightUnreachable is a helper method to define mock.On call
//   - lsID string
func (_e *MockLogicalstatemanagerDbAccess_Expecter) SetLightUnreachable(lsID interface{}) *MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call {
	return &MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call{Call: _e.mock.On("SetLightUnreachable", lsID)}
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call) Run(run func(lsID string)) *MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call) Return(_a0 error) *MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call) RunAndReturn(run func(string) error) *MockLogicalstatemanagerDbAccess_SetLightUnreachable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTargetState provides a mock function with given fields: scheduleName, target
func (_m *MockLogicalstatemanagerDbAccess) UpdateTargetState(scheduleName string, target models.LightState) error {
	ret := _m.Called(scheduleName, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.LightState) error); ok {
		r0 = rf(scheduleName, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogicalstatemanagerDbAccess_UpdateTargetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTargetState'
type MockLogicalstatemanagerDbAccess_UpdateTargetState_Call struct {
	*mock.Call
}

// UpdateTargetState is a helper method to define mock.On call
//   - scheduleName string
//   - target models.LightState
func (_e *MockLogicalstatemanagerDbAccess_Expecter) UpdateTargetState(scheduleName interface{}, target interface{}) *MockLogicalstatemanagerDbAccess_UpdateTargetState_Call {
	return &MockLogicalstatemanagerDbAccess_UpdateTargetState_Call{Call: _e.mock.On("UpdateTargetState", scheduleName, target)}
}

func (_c *MockLogicalstatemanagerDbAccess_UpdateTargetState_Call) Run(run func(scheduleName string, target models.LightState)) *MockLogicalstatemanagerDbAccess_UpdateTargetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.LightState))
	})
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_UpdateTargetState_Call) Return(_a0 error) *MockLogicalstatemanagerDbAccess_UpdateTargetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogicalstatemanagerDbAccess_UpdateTargetState_Call) RunAndReturn(run func(string, models.LightState) error) *MockLogicalstatemanagerDbAccess_UpdateTargetState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogicalstatemanagerDbAccess creates a new instance of MockLogicalstatemanagerDbAccess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogicalstatemanagerDbAccess(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogicalstatemanagerDbAccess {
	mock := &MockLogicalstatemanagerDbAccess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
