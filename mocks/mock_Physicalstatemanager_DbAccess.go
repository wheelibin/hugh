// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/wheelibin/hugh/internal/models"
)

// MockPhysicalstatemanagerDbAccess is an autogenerated mock type for the dbAccess type
type MockPhysicalstatemanagerDbAccess struct {
	mock.Mock
}

type MockPhysicalstatemanagerDbAccess_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPhysicalstatemanagerDbAccess) EXPECT() *MockPhysicalstatemanagerDbAccess_Expecter {
	return &MockPhysicalstatemanagerDbAccess_Expecter{mock: &_m.Mock}
}

// GetAllControllingLightIDs provides a mock function with given fields:
func (_m *MockPhysicalstatemanagerDbAccess) GetAllControllingLightIDs() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllControllingLightIDs'
type MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call struct {
	*mock.Call
}

// GetAllControllingLightIDs is a helper method to define mock.On call
func (_e *MockPhysicalstatemanagerDbAccess_Expecter) GetAllControllingLightIDs() *MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call {
	return &MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call{Call: _e.mock.On("GetAllControllingLightIDs")}
}

func (_c *MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call) Run(run func()) *MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call) Return(_a0 []string, _a1 error) *MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call) RunAndReturn(run func() ([]string, error)) *MockPhysicalstatemanagerDbAccess_GetAllControllingLightIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSceneIDs provides a mock function with given fields:
func (_m *MockPhysicalstatemanagerDbAccess) GetAllSceneIDs() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSceneIDs'
type MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call struct {
	*mock.Call
}

// GetAllSceneIDs is a helper method to define mock.On call
func (_e *MockPhysicalstatemanagerDbAccess_Expecter) GetAllSceneIDs() *MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call {
	return &MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call{Call: _e.mock.On("GetAllSceneIDs")}
}

func (_c *MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call) Run(run func()) *MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call) Return(_a0 []string, _a1 error) *MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call) RunAndReturn(run func() ([]string, error)) *MockPhysicalstatemanagerDbAccess_GetAllSceneIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLightTargetState provides a mock function with given fields: lsID
func (_m *MockPhysicalstatemanagerDbAccess) GetLightTargetState(lsID string) (models.LightState, error) {
	ret := _m.Called(lsID)

	var r0 models.LightState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.LightState, error)); ok {
		return rf(lsID)
	}
	if rf, ok := ret.Get(0).(func(string) models.LightState); ok {
		r0 = rf(lsID)
	} else {
		r0 = ret.Get(0).(models.LightState)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLightTargetState'
type MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call struct {
	*mock.Call
}

// GetLightTargetState is a helper method to define mock.On call
//   - lsID string
func (_e *MockPhysicalstatemanagerDbAccess_Expecter) GetLightTargetState(lsID interface{}) *MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call {
	return &MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call{Call: _e.mock.On("GetLightTargetState", lsID)}
}

func (_c *MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call) Run(run func(lsID string)) *MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call) Return(_a0 models.LightState, _a1 error) *MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call) RunAndReturn(run func(string) (models.LightState, error)) *MockPhysicalstatemanagerDbAccess_GetLightTargetState_Call {
	_c.Call.Return(run)
	return _c
}

// GetSceneTargetState provides a mock function with given fields: id
func (_m *MockPhysicalstatemanagerDbAccess) GetSceneTargetState(id string) (models.LightState, error) {
	ret := _m.Called(id)

	var r0 models.LightState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.LightState, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.LightState); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.LightState)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSceneTargetState'
type MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call struct {
	*mock.Call
}

// GetSceneTargetState is a helper method to define mock.On call
//   - id string
func (_e *MockPhysicalstatemanagerDbAccess_Expecter) GetSceneTargetState(id interface{}) *MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call {
	return &MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call{Call: _e.mock.On("GetSceneTargetState", id)}
}

func (_c *MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call) Run(run func(id string)) *MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call) Return(_a0 models.LightState, _a1 error) *MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call) RunAndReturn(run func(string) (models.LightState, error)) *MockPhysicalstatemanagerDbAccess_GetSceneTargetState_Call {
	_c.Call.Return(run)
	return _c
}

// MarkLightAsUpdated provides a mock function with given fields: lsID
func (_m *MockPhysicalstatemanagerDbAccess) MarkLightAsUpdated(lsID string) error {
	ret := _m.Called(lsID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(lsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkLightAsUpdated'
type MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call struct {
	*mock.Call
}

// MarkLightAsUpdated is a helper method to define mock.On call
//   - lsID string
func (_e *MockPhysicalstatemanagerDbAccess_Expecter) MarkLightAsUpdated(lsID interface{}) *MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call {
	return &MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call{Call: _e.mock.On("MarkLightAsUpdated", lsID)}
}

func (_c *MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call) Run(run func(lsID string)) *MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call) Return(_a0 error) *MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call) RunAndReturn(run func(string) error) *MockPhysicalstatemanagerDbAccess_MarkLightAsUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// SetLightUnreachable provides a mock function with given fields: lsID
func (_m *MockPhysicalstatemanagerDbAccess) SetLightUnreachable(lsID string) error {
	ret := _m.Called(lsID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(lsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLightUnreachable'
type MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call struct {
	*mock.Call
}

// SetLightUnreachable is a helper method to define mock.On call
//   - lsID string
func (_e *MockPhysicalstatemanagerDbAccess_Expecter) SetLightUnreachable(lsID interface{}) *MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call {
	return &MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call{Call: _e.mock.On("SetLightUnreachable", lsID)}
}

func (_c *MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call) Run(run func(lsID string)) *MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call) Return(_a0 error) *MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call) RunAndReturn(run func(string) error) *MockPhysicalstatemanagerDbAccess_SetLightUnreachable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPhysicalstatemanagerDbAccess creates a new instance of MockPhysicalstatemanagerDbAccess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPhysicalstatemanagerDbAccess(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPhysicalstatemanagerDbAccess {
	mock := &MockPhysicalstatemanagerDbAccess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
